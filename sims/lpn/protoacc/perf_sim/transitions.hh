#pragma once
#include <stdlib.h>
#include <functional>
#include "sims/lpn/lpn_common/place_transition.hh"
#include "places.hh"
#include "lpn_funcs.hh"
std::vector<Place<token_class_iasbrr>*> list_0 = {&dma_read_port_req_put_0, &dma_read_port_req_put_1, &dma_read_port_req_put_2, &dma_read_port_req_put_3, &dma_read_port_req_put_4, &dma_read_port_req_put_5, &dma_read_port_req_put_6, &dma_read_port_req_put_7};
std::vector<Place<token_class_iasbrr>*> list_1 = {&dma_write_port_req_put_0};
Transition t1 = {
    .id = "t1",
    .delay_f = con_delay(0),
    .p_input = {&frontend_pcontrol},
    .p_output = {&frontend_pdescr_request_Q,&frontend_pisnot_submessage_value_resp},  
    .pi_w = {take_1_token()},
    .po_w = {pass_token(&frontend_pcontrol, 1),pass_not_submessage(&frontend_pcontrol)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition t2 = {
    .id = "t2",
    .delay_f = con_delay(1),
    .p_input = {&frontend_pAdvance_OK,&frontend_pmessage_tasks},
    .p_output = {&frontend_pcontrol},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&frontend_pmessage_tasks, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t19 = {
    .id = "t19",
    .delay_f = con_delay(1),
    .p_input = {&frontend_pwrites_input_IF_Q},
    .p_output = {&frontend_pwrites_inject_Q},  
    .pi_w = {take_1_token()},
    .po_w = {pass_token(&frontend_pwrites_input_IF_Q, 1)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition tinject_write_dist = {
    .id = "tinject_write_dist",
    .delay_f = con_delay(0),
    .p_input = {&frontend_pwrites_inject_Q,&frontend_phold},
    .p_output = {&frontend_pwrites_inject_Q_non_top,&frontend_pwrites_inject_Q_top},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_top_token(&frontend_pwrites_inject_Q),pass_top_token(&frontend_pwrites_inject_Q)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t24 = {
    .id = "t24",
    .delay_f = con_delay(4),
    .p_input = {&frontend_pwrites_inject_Q_top},
    .p_output = {&frontend_pwrite_mem_resp,&frontend_phold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition tdispatch_dist = {
    .id = "tdispatch_dist",
    .delay_f = con_delay(0),
    .p_input = {&pdispatch_index_holder,&pdispatch_hold},
    .p_output = {&pdispatch_index_holder,&f1_pdispatch_index_holder_,&f2_pdispatch_index_holder_,&f3_pdispatch_index_holder_,&f4_pdispatch_index_holder_,&f5_pdispatch_index_holder_,&f6_pdispatch_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_field_index_add_one(&pdispatch_index_holder, 6),pass_field_index_token(&pdispatch_index_holder, 1),pass_field_index_token(&pdispatch_index_holder, 2),pass_field_index_token(&pdispatch_index_holder, 3),pass_field_index_token(&pdispatch_index_holder, 4),pass_field_index_token(&pdispatch_index_holder, 5),pass_field_index_token(&pdispatch_index_holder, 6)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition twrite_dist = {
    .id = "twrite_dist",
    .delay_f = con_delay(0),
    .p_input = {&frontend_pwrite_index_holder,&pwrite_hold},
    .p_output = {&frontend_pwrite_index_holder,&f1_pwrite_index_holder_,&f2_pwrite_index_holder_,&f3_pwrite_index_holder_,&f4_pwrite_index_holder_,&f5_pwrite_index_holder_,&f6_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_field_index_add_one(&frontend_pwrite_index_holder, 6),pass_field_index_token(&frontend_pwrite_index_holder, 1),pass_field_index_token(&frontend_pwrite_index_holder, 2),pass_field_index_token(&frontend_pwrite_index_holder, 3),pass_field_index_token(&frontend_pwrite_index_holder, 4),pass_field_index_token(&frontend_pwrite_index_holder, 5),pass_field_index_token(&frontend_pwrite_index_holder, 6)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t3_pre = {
    .id = "t3_pre",
    .delay_f = con_delay(1),
    .p_input = {&frontend_pisnot_submessage_value_resp},
    .p_output = {&frontend_p_t_3_pre,&dma_read_port_fifo_order,&dma_read_port_req_put_0},  
    .pi_w = {take_1_token()},
    .po_w = {pass_token(&frontend_pisnot_submessage_value_resp, 1),push_request_order(0, 2),mem_request(0, (int)protoacc::CstStr::NONSUBMESSAGE, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition t3_post = {
    .id = "t3_post",
    .delay_f = con_delay(0),
    .p_input = {&frontend_p_t_3_pre,&dma_read_port_req_get_0},
    .p_output = {&frontend_pAdvance_OK,&frontend_ps_hasBitsLoader_HasBitsLoad},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t10 = {
    .id = "t10",
    .delay_f = con_delay(0),
    .p_input = {&frontend_p10_descr_post3,&frontend_p10_descr_post2},
    .p_output = {&frontend_pholder_split_msg},  
    .pi_w = {take_1_token(),take_all_tokens(&frontend_p10_descr_post3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t9_pre = {
    .id = "t9_pre",
    .delay_f = con_delay(0),
    .p_input = {&frontend_p9_descr,&frontend_psWaitForRequest},
    .p_output = {&frontend_p_t_9_post,&dma_read_port_req_put_0,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(0, (int)protoacc::CstStr::SUBMESSAGE, 2),push_request_order(0, 2)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t9_post = {
    .id = "t9_post",
    .delay_f = con_delay(0),
    .p_input = {&frontend_p_t_9_post,&dma_read_port_req_get_0},
    .p_output = {&frontend_psWaitForRequest,&frontend_pAdvance_OK,&frontend_pholder_split_msg},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition split_msg = {
    .id = "split_msg",
    .delay_f = con_delay(0),
    .p_input = {&frontend_pdescr_request_Q,&frontend_pholder_split_msg},
    .p_output = {&frontend_p10_descr_pre,&frontend_p9_descr},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_message_token(&frontend_pdescr_request_Q),pass_message_token(&frontend_pdescr_request_Q)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition tload_field_addr = {
    .id = "tload_field_addr",
    .delay_f = con_delay(0),
    .p_input = {&frontend_p10_descr_pre,&frontend_ps_hasBitsLoader_HasBitsLoad,&frontend_pfields_meta},
    .p_output = {&frontend_p10_descr_post3,&frontend_p10_descr_post,&dma_read_port_req_put_1,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_as_control(&frontend_p10_descr_pre)},
    .po_w = {anonymous_func_1_pass_token(&frontend_p10_descr_pre),pass_fields_meta_token(&frontend_p10_descr_pre, &frontend_pfields_meta),mem_request_v3(1, (int)protoacc::CstStr::LOAD_EACH_FIELD, &frontend_p10_descr_pre),push_request_order_v3(1, &frontend_p10_descr_pre)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition tload_field_addr_post = {
    .id = "tload_field_addr_post",
    .delay_f = con_delay(2),
    .p_input = {&frontend_p10_descr_post,&dma_read_port_req_get_1},
    .p_output = {&frontend_ptofieldhandler_dispatcher,&frontend_p10_descr_post2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&frontend_p10_descr_post, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition t23_pre = {
    .id = "t23_pre",
    .delay_f = con_delay(0),
    .p_input = {&frontend_pwrites_inject_Q_non_top},
    .p_output = {&frontend_p_t_23,&dma_write_port_req_put_0,&dma_write_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),mem_request_write_v4(0, (int)protoacc::CstStr::WRITE_OUT, &frontend_pwrites_inject_Q_non_top),push_write_request_order_v4(0, &frontend_pwrites_inject_Q_non_top)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition t23_post = {
    .id = "t23_post",
    .delay_f = con_delay(0),
    .p_input = {&frontend_p_t_23},
    .p_output = {&frontend_phold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f1_resume = {
    .id = "f1_resume",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_num_units,&f1_p_finished},
    .p_output = {&f1_p_S_WAIT_CMD,&f1_p_outputQ},  
    .pi_w = {take_1_token(),take_resume_token(&f1_p_num_units)},
    .po_w = {pass_empty_token(),pass_field_end_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_dist = {
    .id = "f1_dist",
    .delay_f = con_delay(0),
    .p_input = {&f1_pops_in_,&f1_p_dist_hold},
    .p_output = {&f1_pops_in__eom,&f1_pops_in__scalar,&f1_pops_in__non_scalar,&f1_pops_in__repeated},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_eom(&f1_pops_in_),pass_scalar(&f1_pops_in_),pass_non_scalar(&f1_pops_in_),pass_repeated(&f1_pops_in_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_eom = {
    .id = "f1_eom",
    .delay_f = con_delay(2),
    .p_input = {&f1_pops_in__eom,&f1_p_S_WAIT_CMD,&f1_p_units},
    .p_output = {&f1_p_outputQ,&f1_p_finished,&f1_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_key_outputQ_end_of_toplevel_token(&f1_pops_in__eom),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f1_25 = {
    .id = "f1_25",
    .delay_f = con_delay(1),
    .p_input = {&f1_pops_in__scalar,&f1_p_S_WAIT_CMD},
    .p_output = {&f1_p_S_SCALAR_DISPATCH_REQ,&f1_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_26 = {
    .id = "f1_26",
    .delay_f = con_delay(1),
    .p_input = {&f1_pops_in__non_scalar,&f1_p_S_WAIT_CMD},
    .p_output = {&f1_p_S_STRING_GETPTR,&f1_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_28 = {
    .id = "f1_28",
    .delay_f = con_delay(1),
    .p_input = {&f1_pops_in__repeated,&f1_p_S_WAIT_CMD},
    .p_output = {&f1_p_S_UNPACKED_REP_GETPTR,&f1_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f1_pops_in__repeated, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_31 = {
    .id = "f1_31",
    .delay_f = con_delay(1),
    .p_input = {&f1_p_S_WRITE_KEY},
    .p_output = {&f1_p_finished,&f1_p_hold,&f1_p_outputQ},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_key_outputQ_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f1_40 = {
    .id = "f1_40",
    .delay_f = con_delay(1),
    .p_input = {&f1_p_S_STRING_WRITE_KEY},
    .p_output = {&f1_p_finished,&f1_p_outputQ,&f1_p_hold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_key_outputQ_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f1_30_pre = {
    .id = "f1_30_pre",
    .delay_f = con_delay(2),
    .p_input = {&f1_p_S_SCALAR_DISPATCH_REQ,&f1_p_hold},
    .p_output = {&f1_p_t_30_pre,&dma_read_port_req_put_2,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(2, (int)protoacc::CstStr::END_OF_MESSAGE, 1),push_request_order(2, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_30_post = {
    .id = "f1_30_post",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_t_30_pre,&dma_read_port_req_get_2,&f1_p_units},
    .p_output = {&f1_p_outputQ,&f1_p_S_WRITE_KEY},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_scalar_outputQ_token(&f1_p_units),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f1_36_pre = {
    .id = "f1_36_pre",
    .delay_f = con_delay(4),
    .p_input = {&f1_p_S_STRING_GETPTR,&f1_p_hold},
    .p_output = {&f1_p_t_36_pre,&dma_read_port_req_put_2,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(2, (int)protoacc::CstStr::NONSCALAR, 3),push_request_order(2, 3)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_36_post = {
    .id = "f1_36_post",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_t_36_pre,&dma_read_port_req_get_2,&f1_p_units},
    .p_output = {&f1_p_S_STRING_LOADDATA},  
    .pi_w = {take_1_token(),take_some_token(3),take_1_token()},
    .po_w = {pass_token(&f1_p_units, 1)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f1_44_pre = {
    .id = "f1_44_pre",
    .delay_f = con_delay(2),
    .p_input = {&f1_p_S_UNPACKED_REP_GETPTR},
    .p_output = {&dma_read_port_req_put_2,&f1_p_t_44_pre,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {mem_request(2, (int)protoacc::CstStr::SCALAR, 2),pass_token(&f1_p_S_UNPACKED_REP_GETPTR, 1),push_request_order(2, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f1_44_post = {
    .id = "f1_44_post",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_t_44_pre,&dma_read_port_req_get_2},
    .p_output = {&f1_p_S_SCALAR_DISPATCH_REQ,&f1_p_S_STRING_GETPTR},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_repeated_array_token(&f1_p_t_44_pre, (int)protoacc::CstStr::SCALAR),pass_repeated_array_token(&f1_p_t_44_pre, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_37_pre = {
    .id = "f1_37_pre",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_S_STRING_LOADDATA},
    .p_output = {&f1_p_t_37_pre,&f1_p_t_37_pre3,&dma_read_port_req_put_2,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_16_bytes_outputQ_token(&f1_p_S_STRING_LOADDATA),pass_bytes_token(&f1_p_S_STRING_LOADDATA),mem_request_v2(2, (int)protoacc::CstStr::END_OF_MESSAGE_TOP_LEVEL, &f1_p_S_STRING_LOADDATA),push_request_order_v2(2, &f1_p_S_STRING_LOADDATA)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f1_37_post = {
    .id = "f1_37_post",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_t_37_pre,&dma_read_port_req_get_2},
    .p_output = {&f1_p_outputQ,&f1_p_t_37_pre2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f1_p_t_37_pre, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_37_post2 = {
    .id = "f1_37_post2",
    .delay_f = con_delay(0),
    .p_input = {&f1_p_t_37_pre3,&f1_p_t_37_pre2},
    .p_output = {&f1_p_S_STRING_WRITE_KEY},  
    .pi_w = {take_1_token(),take_all_tokens(&f1_p_t_37_pre3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f1_dispatch = {
    .id = "f1_dispatch",
    .delay_f = con_delay(1),
    .p_input = {&frontend_ptofieldhandler_dispatcher,&f1_pdispatch_index_holder_,&frontend_pfields},
    .p_output = {&pdispatch_hold,&f1_pops_in_,&f1_p_units,&f1_p_num_units},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_tokens(&frontend_ptofieldhandler_dispatcher)},
    .po_w = {pass_empty_token(),pass_token(&frontend_ptofieldhandler_dispatcher, 1),pass_field_token(&frontend_ptofieldhandler_dispatcher, &frontend_pfields),pass_num_field_token(&frontend_ptofieldhandler_dispatcher)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f1_write_req_out = {
    .id = "f1_write_req_out",
    .delay_f = field_end_cond_delay(&f1_p_outputQ),
    .p_input = {&f1_p_outputQ,&f1_pwrite_index_holder_},
    .p_output = {&frontend_pwrites_input_IF_Q,&pwrite_hold,&f1_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_field_end_token(&f1_p_outputQ, 1),pass_write_hold_cond(&f1_p_outputQ),pass_write_index_holder_cond(&f1_p_outputQ, &f1_pwrite_index_holder_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_resume = {
    .id = "f2_resume",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_num_units,&f2_p_finished},
    .p_output = {&f2_p_S_WAIT_CMD,&f2_p_outputQ},  
    .pi_w = {take_1_token(),take_resume_token(&f2_p_num_units)},
    .po_w = {pass_empty_token(),pass_field_end_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_dist = {
    .id = "f2_dist",
    .delay_f = con_delay(0),
    .p_input = {&f2_pops_in_,&f2_p_dist_hold},
    .p_output = {&f2_pops_in__eom,&f2_pops_in__scalar,&f2_pops_in__non_scalar,&f2_pops_in__repeated},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_eom(&f2_pops_in_),pass_scalar(&f2_pops_in_),pass_non_scalar(&f2_pops_in_),pass_repeated(&f2_pops_in_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_eom = {
    .id = "f2_eom",
    .delay_f = con_delay(2),
    .p_input = {&f2_pops_in__eom,&f2_p_S_WAIT_CMD,&f2_p_units},
    .p_output = {&f2_p_outputQ,&f2_p_finished,&f2_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_key_outputQ_end_of_toplevel_token(&f2_pops_in__eom),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f2_25 = {
    .id = "f2_25",
    .delay_f = con_delay(1),
    .p_input = {&f2_pops_in__scalar,&f2_p_S_WAIT_CMD},
    .p_output = {&f2_p_S_SCALAR_DISPATCH_REQ,&f2_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_26 = {
    .id = "f2_26",
    .delay_f = con_delay(1),
    .p_input = {&f2_pops_in__non_scalar,&f2_p_S_WAIT_CMD},
    .p_output = {&f2_p_S_STRING_GETPTR,&f2_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_28 = {
    .id = "f2_28",
    .delay_f = con_delay(1),
    .p_input = {&f2_pops_in__repeated,&f2_p_S_WAIT_CMD},
    .p_output = {&f2_p_S_UNPACKED_REP_GETPTR,&f2_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f2_pops_in__repeated, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_31 = {
    .id = "f2_31",
    .delay_f = con_delay(1),
    .p_input = {&f2_p_S_WRITE_KEY},
    .p_output = {&f2_p_finished,&f2_p_hold,&f2_p_outputQ},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_key_outputQ_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f2_40 = {
    .id = "f2_40",
    .delay_f = con_delay(1),
    .p_input = {&f2_p_S_STRING_WRITE_KEY},
    .p_output = {&f2_p_finished,&f2_p_outputQ,&f2_p_hold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_key_outputQ_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f2_30_pre = {
    .id = "f2_30_pre",
    .delay_f = con_delay(2),
    .p_input = {&f2_p_S_SCALAR_DISPATCH_REQ,&f2_p_hold},
    .p_output = {&f2_p_t_30_pre,&dma_read_port_req_put_3,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(3, (int)protoacc::CstStr::END_OF_MESSAGE, 1),push_request_order(3, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_30_post = {
    .id = "f2_30_post",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_t_30_pre,&dma_read_port_req_get_3,&f2_p_units},
    .p_output = {&f2_p_outputQ,&f2_p_S_WRITE_KEY},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_scalar_outputQ_token(&f2_p_units),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f2_36_pre = {
    .id = "f2_36_pre",
    .delay_f = con_delay(4),
    .p_input = {&f2_p_S_STRING_GETPTR,&f2_p_hold},
    .p_output = {&f2_p_t_36_pre,&dma_read_port_req_put_3,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(3, (int)protoacc::CstStr::NONSCALAR, 3),push_request_order(3, 3)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_36_post = {
    .id = "f2_36_post",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_t_36_pre,&dma_read_port_req_get_3,&f2_p_units},
    .p_output = {&f2_p_S_STRING_LOADDATA},  
    .pi_w = {take_1_token(),take_some_token(3),take_1_token()},
    .po_w = {pass_token(&f2_p_units, 1)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f2_44_pre = {
    .id = "f2_44_pre",
    .delay_f = con_delay(2),
    .p_input = {&f2_p_S_UNPACKED_REP_GETPTR},
    .p_output = {&dma_read_port_req_put_3,&f2_p_t_44_pre,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {mem_request(3, (int)protoacc::CstStr::SCALAR, 2),pass_token(&f2_p_S_UNPACKED_REP_GETPTR, 1),push_request_order(3, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f2_44_post = {
    .id = "f2_44_post",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_t_44_pre,&dma_read_port_req_get_3},
    .p_output = {&f2_p_S_SCALAR_DISPATCH_REQ,&f2_p_S_STRING_GETPTR},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_repeated_array_token(&f2_p_t_44_pre, (int)protoacc::CstStr::SCALAR),pass_repeated_array_token(&f2_p_t_44_pre, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_37_pre = {
    .id = "f2_37_pre",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_S_STRING_LOADDATA},
    .p_output = {&f2_p_t_37_pre,&f2_p_t_37_pre3,&dma_read_port_req_put_3,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_16_bytes_outputQ_token(&f2_p_S_STRING_LOADDATA),pass_bytes_token(&f2_p_S_STRING_LOADDATA),mem_request_v2(3, (int)protoacc::CstStr::END_OF_MESSAGE_TOP_LEVEL, &f2_p_S_STRING_LOADDATA),push_request_order_v2(3, &f2_p_S_STRING_LOADDATA)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f2_37_post = {
    .id = "f2_37_post",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_t_37_pre,&dma_read_port_req_get_3},
    .p_output = {&f2_p_outputQ,&f2_p_t_37_pre2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f2_p_t_37_pre, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_37_post2 = {
    .id = "f2_37_post2",
    .delay_f = con_delay(0),
    .p_input = {&f2_p_t_37_pre3,&f2_p_t_37_pre2},
    .p_output = {&f2_p_S_STRING_WRITE_KEY},  
    .pi_w = {take_1_token(),take_all_tokens(&f2_p_t_37_pre3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f2_dispatch = {
    .id = "f2_dispatch",
    .delay_f = con_delay(1),
    .p_input = {&frontend_ptofieldhandler_dispatcher,&f2_pdispatch_index_holder_,&frontend_pfields},
    .p_output = {&pdispatch_hold,&f2_pops_in_,&f2_p_units,&f2_p_num_units},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_tokens(&frontend_ptofieldhandler_dispatcher)},
    .po_w = {pass_empty_token(),pass_token(&frontend_ptofieldhandler_dispatcher, 1),pass_field_token(&frontend_ptofieldhandler_dispatcher, &frontend_pfields),pass_num_field_token(&frontend_ptofieldhandler_dispatcher)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f2_write_req_out = {
    .id = "f2_write_req_out",
    .delay_f = field_end_cond_delay(&f2_p_outputQ),
    .p_input = {&f2_p_outputQ,&f2_pwrite_index_holder_},
    .p_output = {&frontend_pwrites_input_IF_Q,&pwrite_hold,&f2_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_field_end_token(&f2_p_outputQ, 1),pass_write_hold_cond(&f2_p_outputQ),pass_write_index_holder_cond(&f2_p_outputQ, &f2_pwrite_index_holder_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_resume = {
    .id = "f3_resume",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_num_units,&f3_p_finished},
    .p_output = {&f3_p_S_WAIT_CMD,&f3_p_outputQ},  
    .pi_w = {take_1_token(),take_resume_token(&f3_p_num_units)},
    .po_w = {pass_empty_token(),pass_field_end_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_dist = {
    .id = "f3_dist",
    .delay_f = con_delay(0),
    .p_input = {&f3_pops_in_,&f3_p_dist_hold},
    .p_output = {&f3_pops_in__eom,&f3_pops_in__scalar,&f3_pops_in__non_scalar,&f3_pops_in__repeated},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_eom(&f3_pops_in_),pass_scalar(&f3_pops_in_),pass_non_scalar(&f3_pops_in_),pass_repeated(&f3_pops_in_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_eom = {
    .id = "f3_eom",
    .delay_f = con_delay(2),
    .p_input = {&f3_pops_in__eom,&f3_p_S_WAIT_CMD,&f3_p_units},
    .p_output = {&f3_p_outputQ,&f3_p_finished,&f3_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_key_outputQ_end_of_toplevel_token(&f3_pops_in__eom),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f3_25 = {
    .id = "f3_25",
    .delay_f = con_delay(1),
    .p_input = {&f3_pops_in__scalar,&f3_p_S_WAIT_CMD},
    .p_output = {&f3_p_S_SCALAR_DISPATCH_REQ,&f3_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_26 = {
    .id = "f3_26",
    .delay_f = con_delay(1),
    .p_input = {&f3_pops_in__non_scalar,&f3_p_S_WAIT_CMD},
    .p_output = {&f3_p_S_STRING_GETPTR,&f3_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_28 = {
    .id = "f3_28",
    .delay_f = con_delay(1),
    .p_input = {&f3_pops_in__repeated,&f3_p_S_WAIT_CMD},
    .p_output = {&f3_p_S_UNPACKED_REP_GETPTR,&f3_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f3_pops_in__repeated, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_31 = {
    .id = "f3_31",
    .delay_f = con_delay(1),
    .p_input = {&f3_p_S_WRITE_KEY},
    .p_output = {&f3_p_finished,&f3_p_hold,&f3_p_outputQ},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_key_outputQ_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f3_40 = {
    .id = "f3_40",
    .delay_f = con_delay(1),
    .p_input = {&f3_p_S_STRING_WRITE_KEY},
    .p_output = {&f3_p_finished,&f3_p_outputQ,&f3_p_hold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_key_outputQ_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f3_30_pre = {
    .id = "f3_30_pre",
    .delay_f = con_delay(2),
    .p_input = {&f3_p_S_SCALAR_DISPATCH_REQ,&f3_p_hold},
    .p_output = {&f3_p_t_30_pre,&dma_read_port_req_put_4,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(4, (int)protoacc::CstStr::END_OF_MESSAGE, 1),push_request_order(4, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_30_post = {
    .id = "f3_30_post",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_t_30_pre,&dma_read_port_req_get_4,&f3_p_units},
    .p_output = {&f3_p_outputQ,&f3_p_S_WRITE_KEY},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_scalar_outputQ_token(&f3_p_units),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f3_36_pre = {
    .id = "f3_36_pre",
    .delay_f = con_delay(4),
    .p_input = {&f3_p_S_STRING_GETPTR,&f3_p_hold},
    .p_output = {&f3_p_t_36_pre,&dma_read_port_req_put_4,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(4, (int)protoacc::CstStr::NONSCALAR, 3),push_request_order(4, 3)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_36_post = {
    .id = "f3_36_post",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_t_36_pre,&dma_read_port_req_get_4,&f3_p_units},
    .p_output = {&f3_p_S_STRING_LOADDATA},  
    .pi_w = {take_1_token(),take_some_token(3),take_1_token()},
    .po_w = {pass_token(&f3_p_units, 1)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f3_44_pre = {
    .id = "f3_44_pre",
    .delay_f = con_delay(2),
    .p_input = {&f3_p_S_UNPACKED_REP_GETPTR},
    .p_output = {&dma_read_port_req_put_4,&f3_p_t_44_pre,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {mem_request(4, (int)protoacc::CstStr::SCALAR, 2),pass_token(&f3_p_S_UNPACKED_REP_GETPTR, 1),push_request_order(4, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f3_44_post = {
    .id = "f3_44_post",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_t_44_pre,&dma_read_port_req_get_4},
    .p_output = {&f3_p_S_SCALAR_DISPATCH_REQ,&f3_p_S_STRING_GETPTR},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_repeated_array_token(&f3_p_t_44_pre, (int)protoacc::CstStr::SCALAR),pass_repeated_array_token(&f3_p_t_44_pre, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_37_pre = {
    .id = "f3_37_pre",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_S_STRING_LOADDATA},
    .p_output = {&f3_p_t_37_pre,&f3_p_t_37_pre3,&dma_read_port_req_put_4,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_16_bytes_outputQ_token(&f3_p_S_STRING_LOADDATA),pass_bytes_token(&f3_p_S_STRING_LOADDATA),mem_request_v2(4, (int)protoacc::CstStr::END_OF_MESSAGE_TOP_LEVEL, &f3_p_S_STRING_LOADDATA),push_request_order_v2(4, &f3_p_S_STRING_LOADDATA)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f3_37_post = {
    .id = "f3_37_post",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_t_37_pre,&dma_read_port_req_get_4},
    .p_output = {&f3_p_outputQ,&f3_p_t_37_pre2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f3_p_t_37_pre, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_37_post2 = {
    .id = "f3_37_post2",
    .delay_f = con_delay(0),
    .p_input = {&f3_p_t_37_pre3,&f3_p_t_37_pre2},
    .p_output = {&f3_p_S_STRING_WRITE_KEY},  
    .pi_w = {take_1_token(),take_all_tokens(&f3_p_t_37_pre3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f3_dispatch = {
    .id = "f3_dispatch",
    .delay_f = con_delay(1),
    .p_input = {&frontend_ptofieldhandler_dispatcher,&f3_pdispatch_index_holder_,&frontend_pfields},
    .p_output = {&pdispatch_hold,&f3_pops_in_,&f3_p_units,&f3_p_num_units},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_tokens(&frontend_ptofieldhandler_dispatcher)},
    .po_w = {pass_empty_token(),pass_token(&frontend_ptofieldhandler_dispatcher, 1),pass_field_token(&frontend_ptofieldhandler_dispatcher, &frontend_pfields),pass_num_field_token(&frontend_ptofieldhandler_dispatcher)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f3_write_req_out = {
    .id = "f3_write_req_out",
    .delay_f = field_end_cond_delay(&f3_p_outputQ),
    .p_input = {&f3_p_outputQ,&f3_pwrite_index_holder_},
    .p_output = {&frontend_pwrites_input_IF_Q,&pwrite_hold,&f3_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_field_end_token(&f3_p_outputQ, 1),pass_write_hold_cond(&f3_p_outputQ),pass_write_index_holder_cond(&f3_p_outputQ, &f3_pwrite_index_holder_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_resume = {
    .id = "f4_resume",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_num_units,&f4_p_finished},
    .p_output = {&f4_p_S_WAIT_CMD,&f4_p_outputQ},  
    .pi_w = {take_1_token(),take_resume_token(&f4_p_num_units)},
    .po_w = {pass_empty_token(),pass_field_end_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_dist = {
    .id = "f4_dist",
    .delay_f = con_delay(0),
    .p_input = {&f4_pops_in_,&f4_p_dist_hold},
    .p_output = {&f4_pops_in__eom,&f4_pops_in__scalar,&f4_pops_in__non_scalar,&f4_pops_in__repeated},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_eom(&f4_pops_in_),pass_scalar(&f4_pops_in_),pass_non_scalar(&f4_pops_in_),pass_repeated(&f4_pops_in_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_eom = {
    .id = "f4_eom",
    .delay_f = con_delay(2),
    .p_input = {&f4_pops_in__eom,&f4_p_S_WAIT_CMD,&f4_p_units},
    .p_output = {&f4_p_outputQ,&f4_p_finished,&f4_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_key_outputQ_end_of_toplevel_token(&f4_pops_in__eom),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f4_25 = {
    .id = "f4_25",
    .delay_f = con_delay(1),
    .p_input = {&f4_pops_in__scalar,&f4_p_S_WAIT_CMD},
    .p_output = {&f4_p_S_SCALAR_DISPATCH_REQ,&f4_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_26 = {
    .id = "f4_26",
    .delay_f = con_delay(1),
    .p_input = {&f4_pops_in__non_scalar,&f4_p_S_WAIT_CMD},
    .p_output = {&f4_p_S_STRING_GETPTR,&f4_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_28 = {
    .id = "f4_28",
    .delay_f = con_delay(1),
    .p_input = {&f4_pops_in__repeated,&f4_p_S_WAIT_CMD},
    .p_output = {&f4_p_S_UNPACKED_REP_GETPTR,&f4_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f4_pops_in__repeated, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_31 = {
    .id = "f4_31",
    .delay_f = con_delay(1),
    .p_input = {&f4_p_S_WRITE_KEY},
    .p_output = {&f4_p_finished,&f4_p_hold,&f4_p_outputQ},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_key_outputQ_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f4_40 = {
    .id = "f4_40",
    .delay_f = con_delay(1),
    .p_input = {&f4_p_S_STRING_WRITE_KEY},
    .p_output = {&f4_p_finished,&f4_p_outputQ,&f4_p_hold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_key_outputQ_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f4_30_pre = {
    .id = "f4_30_pre",
    .delay_f = con_delay(2),
    .p_input = {&f4_p_S_SCALAR_DISPATCH_REQ,&f4_p_hold},
    .p_output = {&f4_p_t_30_pre,&dma_read_port_req_put_5,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(5, (int)protoacc::CstStr::END_OF_MESSAGE, 1),push_request_order(5, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_30_post = {
    .id = "f4_30_post",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_t_30_pre,&dma_read_port_req_get_5,&f4_p_units},
    .p_output = {&f4_p_outputQ,&f4_p_S_WRITE_KEY},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_scalar_outputQ_token(&f4_p_units),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f4_36_pre = {
    .id = "f4_36_pre",
    .delay_f = con_delay(4),
    .p_input = {&f4_p_S_STRING_GETPTR,&f4_p_hold},
    .p_output = {&f4_p_t_36_pre,&dma_read_port_req_put_5,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(5, (int)protoacc::CstStr::NONSCALAR, 3),push_request_order(5, 3)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_36_post = {
    .id = "f4_36_post",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_t_36_pre,&dma_read_port_req_get_5,&f4_p_units},
    .p_output = {&f4_p_S_STRING_LOADDATA},  
    .pi_w = {take_1_token(),take_some_token(3),take_1_token()},
    .po_w = {pass_token(&f4_p_units, 1)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f4_44_pre = {
    .id = "f4_44_pre",
    .delay_f = con_delay(2),
    .p_input = {&f4_p_S_UNPACKED_REP_GETPTR},
    .p_output = {&dma_read_port_req_put_5,&f4_p_t_44_pre,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {mem_request(5, (int)protoacc::CstStr::SCALAR, 2),pass_token(&f4_p_S_UNPACKED_REP_GETPTR, 1),push_request_order(5, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f4_44_post = {
    .id = "f4_44_post",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_t_44_pre,&dma_read_port_req_get_5},
    .p_output = {&f4_p_S_SCALAR_DISPATCH_REQ,&f4_p_S_STRING_GETPTR},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_repeated_array_token(&f4_p_t_44_pre, (int)protoacc::CstStr::SCALAR),pass_repeated_array_token(&f4_p_t_44_pre, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_37_pre = {
    .id = "f4_37_pre",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_S_STRING_LOADDATA},
    .p_output = {&f4_p_t_37_pre,&f4_p_t_37_pre3,&dma_read_port_req_put_5,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_16_bytes_outputQ_token(&f4_p_S_STRING_LOADDATA),pass_bytes_token(&f4_p_S_STRING_LOADDATA),mem_request_v2(5, (int)protoacc::CstStr::END_OF_MESSAGE_TOP_LEVEL, &f4_p_S_STRING_LOADDATA),push_request_order_v2(5, &f4_p_S_STRING_LOADDATA)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f4_37_post = {
    .id = "f4_37_post",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_t_37_pre,&dma_read_port_req_get_5},
    .p_output = {&f4_p_outputQ,&f4_p_t_37_pre2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f4_p_t_37_pre, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_37_post2 = {
    .id = "f4_37_post2",
    .delay_f = con_delay(0),
    .p_input = {&f4_p_t_37_pre3,&f4_p_t_37_pre2},
    .p_output = {&f4_p_S_STRING_WRITE_KEY},  
    .pi_w = {take_1_token(),take_all_tokens(&f4_p_t_37_pre3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f4_dispatch = {
    .id = "f4_dispatch",
    .delay_f = con_delay(1),
    .p_input = {&frontend_ptofieldhandler_dispatcher,&f4_pdispatch_index_holder_,&frontend_pfields},
    .p_output = {&pdispatch_hold,&f4_pops_in_,&f4_p_units,&f4_p_num_units},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_tokens(&frontend_ptofieldhandler_dispatcher)},
    .po_w = {pass_empty_token(),pass_token(&frontend_ptofieldhandler_dispatcher, 1),pass_field_token(&frontend_ptofieldhandler_dispatcher, &frontend_pfields),pass_num_field_token(&frontend_ptofieldhandler_dispatcher)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f4_write_req_out = {
    .id = "f4_write_req_out",
    .delay_f = field_end_cond_delay(&f4_p_outputQ),
    .p_input = {&f4_p_outputQ,&f4_pwrite_index_holder_},
    .p_output = {&frontend_pwrites_input_IF_Q,&pwrite_hold,&f4_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_field_end_token(&f4_p_outputQ, 1),pass_write_hold_cond(&f4_p_outputQ),pass_write_index_holder_cond(&f4_p_outputQ, &f4_pwrite_index_holder_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_resume = {
    .id = "f5_resume",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_num_units,&f5_p_finished},
    .p_output = {&f5_p_S_WAIT_CMD,&f5_p_outputQ},  
    .pi_w = {take_1_token(),take_resume_token(&f5_p_num_units)},
    .po_w = {pass_empty_token(),pass_field_end_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_dist = {
    .id = "f5_dist",
    .delay_f = con_delay(0),
    .p_input = {&f5_pops_in_,&f5_p_dist_hold},
    .p_output = {&f5_pops_in__eom,&f5_pops_in__scalar,&f5_pops_in__non_scalar,&f5_pops_in__repeated},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_eom(&f5_pops_in_),pass_scalar(&f5_pops_in_),pass_non_scalar(&f5_pops_in_),pass_repeated(&f5_pops_in_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_eom = {
    .id = "f5_eom",
    .delay_f = con_delay(2),
    .p_input = {&f5_pops_in__eom,&f5_p_S_WAIT_CMD,&f5_p_units},
    .p_output = {&f5_p_outputQ,&f5_p_finished,&f5_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_key_outputQ_end_of_toplevel_token(&f5_pops_in__eom),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f5_25 = {
    .id = "f5_25",
    .delay_f = con_delay(1),
    .p_input = {&f5_pops_in__scalar,&f5_p_S_WAIT_CMD},
    .p_output = {&f5_p_S_SCALAR_DISPATCH_REQ,&f5_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_26 = {
    .id = "f5_26",
    .delay_f = con_delay(1),
    .p_input = {&f5_pops_in__non_scalar,&f5_p_S_WAIT_CMD},
    .p_output = {&f5_p_S_STRING_GETPTR,&f5_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_28 = {
    .id = "f5_28",
    .delay_f = con_delay(1),
    .p_input = {&f5_pops_in__repeated,&f5_p_S_WAIT_CMD},
    .p_output = {&f5_p_S_UNPACKED_REP_GETPTR,&f5_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f5_pops_in__repeated, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_31 = {
    .id = "f5_31",
    .delay_f = con_delay(1),
    .p_input = {&f5_p_S_WRITE_KEY},
    .p_output = {&f5_p_finished,&f5_p_hold,&f5_p_outputQ},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_key_outputQ_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f5_40 = {
    .id = "f5_40",
    .delay_f = con_delay(1),
    .p_input = {&f5_p_S_STRING_WRITE_KEY},
    .p_output = {&f5_p_finished,&f5_p_outputQ,&f5_p_hold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_key_outputQ_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f5_30_pre = {
    .id = "f5_30_pre",
    .delay_f = con_delay(2),
    .p_input = {&f5_p_S_SCALAR_DISPATCH_REQ,&f5_p_hold},
    .p_output = {&f5_p_t_30_pre,&dma_read_port_req_put_6,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(6, (int)protoacc::CstStr::END_OF_MESSAGE, 1),push_request_order(6, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_30_post = {
    .id = "f5_30_post",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_t_30_pre,&dma_read_port_req_get_6,&f5_p_units},
    .p_output = {&f5_p_outputQ,&f5_p_S_WRITE_KEY},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_scalar_outputQ_token(&f5_p_units),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f5_36_pre = {
    .id = "f5_36_pre",
    .delay_f = con_delay(4),
    .p_input = {&f5_p_S_STRING_GETPTR,&f5_p_hold},
    .p_output = {&f5_p_t_36_pre,&dma_read_port_req_put_6,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(6, (int)protoacc::CstStr::NONSCALAR, 3),push_request_order(6, 3)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_36_post = {
    .id = "f5_36_post",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_t_36_pre,&dma_read_port_req_get_6,&f5_p_units},
    .p_output = {&f5_p_S_STRING_LOADDATA},  
    .pi_w = {take_1_token(),take_some_token(3),take_1_token()},
    .po_w = {pass_token(&f5_p_units, 1)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f5_44_pre = {
    .id = "f5_44_pre",
    .delay_f = con_delay(2),
    .p_input = {&f5_p_S_UNPACKED_REP_GETPTR},
    .p_output = {&dma_read_port_req_put_6,&f5_p_t_44_pre,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {mem_request(6, (int)protoacc::CstStr::SCALAR, 2),pass_token(&f5_p_S_UNPACKED_REP_GETPTR, 1),push_request_order(6, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f5_44_post = {
    .id = "f5_44_post",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_t_44_pre,&dma_read_port_req_get_6},
    .p_output = {&f5_p_S_SCALAR_DISPATCH_REQ,&f5_p_S_STRING_GETPTR},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_repeated_array_token(&f5_p_t_44_pre, (int)protoacc::CstStr::SCALAR),pass_repeated_array_token(&f5_p_t_44_pre, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_37_pre = {
    .id = "f5_37_pre",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_S_STRING_LOADDATA},
    .p_output = {&f5_p_t_37_pre,&f5_p_t_37_pre3,&dma_read_port_req_put_6,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_16_bytes_outputQ_token(&f5_p_S_STRING_LOADDATA),pass_bytes_token(&f5_p_S_STRING_LOADDATA),mem_request_v2(6, (int)protoacc::CstStr::END_OF_MESSAGE_TOP_LEVEL, &f5_p_S_STRING_LOADDATA),push_request_order_v2(6, &f5_p_S_STRING_LOADDATA)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f5_37_post = {
    .id = "f5_37_post",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_t_37_pre,&dma_read_port_req_get_6},
    .p_output = {&f5_p_outputQ,&f5_p_t_37_pre2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f5_p_t_37_pre, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_37_post2 = {
    .id = "f5_37_post2",
    .delay_f = con_delay(0),
    .p_input = {&f5_p_t_37_pre3,&f5_p_t_37_pre2},
    .p_output = {&f5_p_S_STRING_WRITE_KEY},  
    .pi_w = {take_1_token(),take_all_tokens(&f5_p_t_37_pre3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f5_dispatch = {
    .id = "f5_dispatch",
    .delay_f = con_delay(1),
    .p_input = {&frontend_ptofieldhandler_dispatcher,&f5_pdispatch_index_holder_,&frontend_pfields},
    .p_output = {&pdispatch_hold,&f5_pops_in_,&f5_p_units,&f5_p_num_units},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_tokens(&frontend_ptofieldhandler_dispatcher)},
    .po_w = {pass_empty_token(),pass_token(&frontend_ptofieldhandler_dispatcher, 1),pass_field_token(&frontend_ptofieldhandler_dispatcher, &frontend_pfields),pass_num_field_token(&frontend_ptofieldhandler_dispatcher)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f5_write_req_out = {
    .id = "f5_write_req_out",
    .delay_f = field_end_cond_delay(&f5_p_outputQ),
    .p_input = {&f5_p_outputQ,&f5_pwrite_index_holder_},
    .p_output = {&frontend_pwrites_input_IF_Q,&pwrite_hold,&f5_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_field_end_token(&f5_p_outputQ, 1),pass_write_hold_cond(&f5_p_outputQ),pass_write_index_holder_cond(&f5_p_outputQ, &f5_pwrite_index_holder_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_resume = {
    .id = "f6_resume",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_num_units,&f6_p_finished},
    .p_output = {&f6_p_S_WAIT_CMD,&f6_p_outputQ},  
    .pi_w = {take_1_token(),take_resume_token(&f6_p_num_units)},
    .po_w = {pass_empty_token(),pass_field_end_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_dist = {
    .id = "f6_dist",
    .delay_f = con_delay(0),
    .p_input = {&f6_pops_in_,&f6_p_dist_hold},
    .p_output = {&f6_pops_in__eom,&f6_pops_in__scalar,&f6_pops_in__non_scalar,&f6_pops_in__repeated},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_eom(&f6_pops_in_),pass_scalar(&f6_pops_in_),pass_non_scalar(&f6_pops_in_),pass_repeated(&f6_pops_in_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_eom = {
    .id = "f6_eom",
    .delay_f = con_delay(2),
    .p_input = {&f6_pops_in__eom,&f6_p_S_WAIT_CMD,&f6_p_units},
    .p_output = {&f6_p_outputQ,&f6_p_finished,&f6_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_key_outputQ_end_of_toplevel_token(&f6_pops_in__eom),pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f6_25 = {
    .id = "f6_25",
    .delay_f = con_delay(1),
    .p_input = {&f6_pops_in__scalar,&f6_p_S_WAIT_CMD},
    .p_output = {&f6_p_S_SCALAR_DISPATCH_REQ,&f6_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_26 = {
    .id = "f6_26",
    .delay_f = con_delay(1),
    .p_input = {&f6_pops_in__non_scalar,&f6_p_S_WAIT_CMD},
    .p_output = {&f6_p_S_STRING_GETPTR,&f6_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_28 = {
    .id = "f6_28",
    .delay_f = con_delay(1),
    .p_input = {&f6_pops_in__repeated,&f6_p_S_WAIT_CMD},
    .p_output = {&f6_p_S_UNPACKED_REP_GETPTR,&f6_p_dist_hold},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f6_pops_in__repeated, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_31 = {
    .id = "f6_31",
    .delay_f = con_delay(1),
    .p_input = {&f6_p_S_WRITE_KEY},
    .p_output = {&f6_p_finished,&f6_p_hold,&f6_p_outputQ},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_empty_token(),pass_key_outputQ_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f6_40 = {
    .id = "f6_40",
    .delay_f = con_delay(1),
    .p_input = {&f6_p_S_STRING_WRITE_KEY},
    .p_output = {&f6_p_finished,&f6_p_outputQ,&f6_p_hold},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_key_outputQ_token(),pass_empty_token()},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f6_30_pre = {
    .id = "f6_30_pre",
    .delay_f = con_delay(2),
    .p_input = {&f6_p_S_SCALAR_DISPATCH_REQ,&f6_p_hold},
    .p_output = {&f6_p_t_30_pre,&dma_read_port_req_put_7,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(7, (int)protoacc::CstStr::END_OF_MESSAGE, 1),push_request_order(7, 1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_30_post = {
    .id = "f6_30_post",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_t_30_pre,&dma_read_port_req_get_7,&f6_p_units},
    .p_output = {&f6_p_outputQ,&f6_p_S_WRITE_KEY},  
    .pi_w = {take_1_token(),take_1_token(),take_1_token()},
    .po_w = {pass_scalar_outputQ_token(&f6_p_units),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f6_36_pre = {
    .id = "f6_36_pre",
    .delay_f = con_delay(4),
    .p_input = {&f6_p_S_STRING_GETPTR,&f6_p_hold},
    .p_output = {&f6_p_t_36_pre,&dma_read_port_req_put_7,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_empty_token(),mem_request(7, (int)protoacc::CstStr::NONSCALAR, 3),push_request_order(7, 3)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_36_post = {
    .id = "f6_36_post",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_t_36_pre,&dma_read_port_req_get_7,&f6_p_units},
    .p_output = {&f6_p_S_STRING_LOADDATA},  
    .pi_w = {take_1_token(),take_some_token(3),take_1_token()},
    .po_w = {pass_token(&f6_p_units, 1)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f6_44_pre = {
    .id = "f6_44_pre",
    .delay_f = con_delay(2),
    .p_input = {&f6_p_S_UNPACKED_REP_GETPTR},
    .p_output = {&dma_read_port_req_put_7,&f6_p_t_44_pre,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {mem_request(7, (int)protoacc::CstStr::SCALAR, 2),pass_token(&f6_p_S_UNPACKED_REP_GETPTR, 1),push_request_order(7, 2)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f6_44_post = {
    .id = "f6_44_post",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_t_44_pre,&dma_read_port_req_get_7},
    .p_output = {&f6_p_S_SCALAR_DISPATCH_REQ,&f6_p_S_STRING_GETPTR},  
    .pi_w = {take_1_token(),take_some_token(2)},
    .po_w = {pass_repeated_array_token(&f6_p_t_44_pre, (int)protoacc::CstStr::SCALAR),pass_repeated_array_token(&f6_p_t_44_pre, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_37_pre = {
    .id = "f6_37_pre",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_S_STRING_LOADDATA},
    .p_output = {&f6_p_t_37_pre,&f6_p_t_37_pre3,&dma_read_port_req_put_7,&dma_read_port_fifo_order},  
    .pi_w = {take_1_token()},
    .po_w = {pass_16_bytes_outputQ_token(&f6_p_S_STRING_LOADDATA),pass_bytes_token(&f6_p_S_STRING_LOADDATA),mem_request_v2(7, (int)protoacc::CstStr::END_OF_MESSAGE_TOP_LEVEL, &f6_p_S_STRING_LOADDATA),push_request_order_v2(7, &f6_p_S_STRING_LOADDATA)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = NULL
};
Transition f6_37_post = {
    .id = "f6_37_post",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_t_37_pre,&dma_read_port_req_get_7},
    .p_output = {&f6_p_outputQ,&f6_p_t_37_pre2},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_token(&f6_p_t_37_pre, 1),pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_37_post2 = {
    .id = "f6_37_post2",
    .delay_f = con_delay(0),
    .p_input = {&f6_p_t_37_pre3,&f6_p_t_37_pre2},
    .p_output = {&f6_p_S_STRING_WRITE_KEY},  
    .pi_w = {take_1_token(),take_all_tokens(&f6_p_t_37_pre3)},
    .po_w = {pass_empty_token()},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition f6_dispatch = {
    .id = "f6_dispatch",
    .delay_f = con_delay(1),
    .p_input = {&frontend_ptofieldhandler_dispatcher,&f6_pdispatch_index_holder_,&frontend_pfields},
    .p_output = {&pdispatch_hold,&f6_pops_in_,&f6_p_units,&f6_p_num_units},  
    .pi_w = {take_1_token(),take_1_token(),take_num_field_tokens(&frontend_ptofieldhandler_dispatcher)},
    .po_w = {pass_empty_token(),pass_token(&frontend_ptofieldhandler_dispatcher, 1),pass_field_token(&frontend_ptofieldhandler_dispatcher, &frontend_pfields),pass_num_field_token(&frontend_ptofieldhandler_dispatcher)},
    .pi_w_threshold = {NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL},
    .pip = NULL
};
Transition f6_write_req_out = {
    .id = "f6_write_req_out",
    .delay_f = field_end_cond_delay(&f6_p_outputQ),
    .p_input = {&f6_p_outputQ,&f6_pwrite_index_holder_},
    .p_output = {&frontend_pwrites_input_IF_Q,&pwrite_hold,&f6_pwrite_index_holder_},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {pass_non_field_end_token(&f6_p_outputQ, 1),pass_write_hold_cond(&f6_p_outputQ),pass_write_index_holder_cond(&f6_p_outputQ, &f6_pwrite_index_holder_)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition dma_read_port_arbiter = {
    .id = "dma_read_port_arbiter",
    .delay_f = con_delay(0),
    .p_input = {&dma_read_port_fifo_order,&dma_read_port_req_put_0,&dma_read_port_req_put_1,&dma_read_port_req_put_2,&dma_read_port_req_put_3,&dma_read_port_req_put_4,&dma_read_port_req_put_5,&dma_read_port_req_put_6,&dma_read_port_req_put_7},
    .p_output = {&dma_read_port_mem_put_buf},  
    .pi_w = {take_1_token(),arbiterhelperord_take_0_or_1(0, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(1, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(2, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(3, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(4, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(5, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(6, &dma_read_port_fifo_order),arbiterhelperord_take_0_or_1(7, &dma_read_port_fifo_order)},
    .po_w = {arbiterhelperord_pass_turn_token(&dma_read_port_fifo_order, list_0)},
    .pi_w_threshold = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    .pi_guard = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    .pip = NULL
};
Transition dma_read_port_mem_get = {
    .id = "dma_read_port_mem_get",
    .delay_f = con_delay_ns(0),
    .p_input = {&dma_read_port_recv_buf},
    .p_output = {&dma_read_port_send_cap,&dma_read_port_req_get_0,&dma_read_port_req_get_1,&dma_read_port_req_get_2,&dma_read_port_req_get_3,&dma_read_port_req_get_4,&dma_read_port_req_get_5,&dma_read_port_req_get_6,&dma_read_port_req_get_7},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_token_match_port(&dma_read_port_recv_buf, 0),pass_token_match_port(&dma_read_port_recv_buf, 1),pass_token_match_port(&dma_read_port_recv_buf, 2),pass_token_match_port(&dma_read_port_recv_buf, 3),pass_token_match_port(&dma_read_port_recv_buf, 4),pass_token_match_port(&dma_read_port_recv_buf, 5),pass_token_match_port(&dma_read_port_recv_buf, 6),pass_token_match_port(&dma_read_port_recv_buf, 7)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = con_delay_ns(0)
};
Transition dma_read_port_recv_from_mem = {
    .id = "dma_read_port_recv_from_mem",
    .delay_f = delay_0_if_resp_ready((int)protoacc::CstStr::END_OF_MESSAGE),
    .p_output = {&dma_read_port_recv_buf},  
    .po_w = {call_get_mem((int)protoacc::CstStr::END_OF_MESSAGE)},
    .pip = NULL
};
Transition dma_read_port_mem_put = {
    .id = "dma_read_port_mem_put",
    .delay_f = con_delay_ns(0),
    .p_input = {&dma_read_port_mem_put_buf,&dma_read_port_send_cap},
    .p_output = {&dma_read_port_SINK},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {call_put_mem(&dma_read_port_mem_put_buf, (int)protoacc::CstStr::END_OF_MESSAGE)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = con_delay_ns(0)
};
Transition dma_write_port_arbiter = {
    .id = "dma_write_port_arbiter",
    .delay_f = con_delay(0),
    .p_input = {&dma_write_port_fifo_order,&dma_write_port_req_put_0},
    .p_output = {&dma_write_port_mem_put_buf},  
    .pi_w = {take_1_token(),arbiterhelperord_take_0_or_1(0, &dma_write_port_fifo_order)},
    .po_w = {arbiterhelperord_pass_turn_token(&dma_write_port_fifo_order, list_1)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = NULL
};
Transition dma_write_port_mem_get = {
    .id = "dma_write_port_mem_get",
    .delay_f = con_delay_ns(0),
    .p_input = {&dma_write_port_recv_buf},
    .p_output = {&dma_write_port_send_cap,&dma_write_port_req_get_0},  
    .pi_w = {take_1_token()},
    .po_w = {pass_empty_token(),pass_token_match_port(&dma_write_port_recv_buf, 0)},
    .pi_w_threshold = {NULL},
    .pi_guard = {NULL},
    .pip = con_delay_ns(0)
};
Transition dma_write_port_recv_from_mem = {
    .id = "dma_write_port_recv_from_mem",
    .delay_f = delay_0_if_resp_ready((int)protoacc::CstStr::NONSCALAR),
    .p_input = {},
    .p_output = {&dma_write_port_recv_buf},  
    .pi_w = {},
    .po_w = {call_get_mem((int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {},
    .pi_guard = {},
    .pip = NULL
};
Transition dma_write_port_mem_put = {
    .id = "dma_write_port_mem_put",
    .delay_f = con_delay_ns(0),
    .p_input = {&dma_write_port_mem_put_buf,&dma_write_port_send_cap},
    .p_output = {&dma_write_port_SINK},  
    .pi_w = {take_1_token(),take_1_token()},
    .po_w = {call_put_mem(&dma_write_port_mem_put_buf, (int)protoacc::CstStr::NONSCALAR)},
    .pi_w_threshold = {NULL, NULL},
    .pi_guard = {NULL, NULL},
    .pip = con_delay_ns(0)
};
